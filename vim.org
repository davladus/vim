* Navigation:
** Move and Edit
  h, j, k, l  - navigation
  x - delete next symbol
  xw -delete next word
  Ctrl+W -delete previous word
  gd - go to definition
  w - go to next word
  b - go to previous word
  0 - beginning of the line
  $ - end of the line
  ^ - first non white space
  G - end of  the file
  gg- top of the file
  fx - go to next occurence of x
  Fx - go to previous occurence of x

  d$ - delete to the end of line
  dd - delete the whole line
  2dd - delete 2 lines
  u - undo
  Ctrl-R - redo
  r - replace character under cursor
  c - change
  a - start edit after symbol
  o - start edit in next line
  O - start editing at previous line


 / - search 

** some samples
*** you accidentally typed "accifentally". No problem, the sequence EscFfrdA 
    will correct the mistake and bring you back where you've been editing it. 
    Ff movement will bring you back to the first encountered "f" character.
    Compare with Ctrl+<-->->->->deldEnd, that does virtually the same in a casual editor, but takes more keystrokes, makes you move your hand out of alphanumeric space of the keyboard.
*** you accidentally typed "you accidentally typed", but want to correct it to "you intentionally typed". 
Then Esc2bcw will erase the word you want to fix and bring you to insert mode, so you can immediately retype it
. To get back to editing, just press A instead of End, to reach which you should move your hand
*** you accidentally typed "mouse" instead of "mice". No problem - the good old Ctrl+W will
 delete the previous word without going out from insert mode.

you accidentally typed


*** repetition count is largely underused. Before making a movement, 
you can type a number; and the movement will be repeated this number 
of times. For example, 15h will bring you 15 characters back and 4j 
will scroll you 4 lines down. Start using them and you'll get used soon
 and find out that pressing 10 times <- key is less fast than iterative
 approach to moving cursor, when you type 12h, notice that you made a mistake
 and immediately correct yourself with ll.

this is  
   

this is a mouse it happens to be much faster to erase small word than to fix errors in it. I'm so used to it that I had closed the browser page when I was typing this message...
repetition count is largely underused. Before making a movement, you can type a number; and the movement will be repeated this number of times. For example, 15h will bring you 15 characters back and 4j will scroll you 4 lines down. Start using them and you'll get used soon and find out that pressing 10 times <- key is less fast than iterative approach to moving cursor, when you type 12h, notice that you made a mistake and immediately correct yourself with ll.*** iuuudentally typed "accifentally". No problem, the sequence EscFfrdA will correct the mistake and bring you back where you've been editing it. Ff movement will bring you back to the first encountered "f" character. Compare with Ctrl+<-->->->->deldEnd, that does virtually the same in a casual editor, but takes more keystrokes, makes you move your hand out of alphanumeric space of the keyboard.
  


* Basic editing:

	* Press 'Insert' button to switch into edit mode
	* Press 'Esc' buttun to return to commands mode
	* In commands mode type ':' to input command
	* :w - save changes



============================================
Config file
Q: Where I should put my vimrc file?

On Windows systems, the best way to find the value of $HOME is from within Vim, as follows. These commands are useful to see what directories your Vim is using:

:version
:echo expand('~')
:echo $HOME
:echo $VIM
:echo $VIMRUNTIME


fset

Settings
  * are stored in0 _vimrc file (under windows)
	* :mkvimrc - Saves current vim settings into _vimrc in the current directory

===========================================
Open file in vim in new tab

C:\Program Files\Vim\vim72\gvim.exe --remote-tab-silent "%1"



===========================================
Commands:
:w save changes
:tabnew new tab

===========================================
SEARCH:
/MyName  do incremental search of MyName
After pressing ENTER 
[ n- move cursor to next occurence, N previuos ]
===========================================
==========================================
Indent
gg=G indent whole file



## Practical vim


* A     append to the end of the line
* daw   delete a word (also deletes gap)
* diw   delete inner word (without gap)
* yy    yank current line
* Y     yank current line
* C-a   add to number
        180<C-a> - adds 180 to next digit
* C-x   substract number

* vit   selects innter content of the tag  <a>text</a>  

* gv    repeats last visual selectiion
* cgn   change and go next



















http://stackoverflow.com/questions/5400806/what-are-the-most-used-vim-commands-keypresses

73
down vote
accepted
Here's a tip sheet I wrote up once, with the commands I actually use regularly:

References

vim documentation online
advanced vim tips
more useful tips and graphical cheat sheet
General

Nearly all commands can be preceded by a number for a repeat count. eg. 5dd delete 5 lines
<Esc> gets you out of any mode and back to command mode
Commands preceded by : are executed on the command line at the bottom of the screen
:help help with any command
Navigation

Cursor movement: ←h ↓j ↑k l→
By words:
w next word (by punctuation); W next word (by spaces)
b back word (by punctuation); B back word (by spaces)
e end word (by punctuation); E end word (by spaces)
By line:
0 start of line; ^ first non-whitespace
$ end of line
By paragraph:
{ previous blank line; } next blank line
By file:
gg start of file; G end of file
123G go to specific line number
By marker:
mx set mark x; 'x go to mark x
'. go to position of last edit
' ' go back to last point before jump
Scrolling:
^F forward full screen; ^B backward full screen
^D down half screen; ^U up half screen
^E scroll one line up; ^Y scroll one line down
zz centre cursor line
Editing

u undo; ^R redo
. repeat last editing command
Inserting

All insertion commands are terminated with <Esc> to return to command mode.

i insert text at cursor; I insert text at start of line
a append text after cursor; A append text after end of line
o open new line below; O open new line above
Changing

r replace single character; R replace multiple characters
s change single character
cw change word; C change to end of line; cc change whole line
c<motion> changes text in the direction of the motion
ci( change inside parentheses (see text object selection for more examples)
Deleting

x delete char
dw delete word; D delete to end of line; dd delete whole line
d<motion> deletes in the direction of the motion
Cut and paste

yy copy line into paste buffer; dd cut line into paste buffer
p paste buffer below cursor line; P paste buffer above cursor line
xp swap two characters (x to delete one character, then p to put it back after the cursor position)
Blocks

v visual block stream; V visual block line; ^V visual block column
most motion commands extend the block to the new cursor position
o moves the cursor to the other end of the block
d or x cut block into paste buffer
y copy block into paste buffer
> indent block; < unindent block
gv reselect last visual block
Global

:%s/foo/bar/g substitute all occurrences of "foo" to "bar"
% is a range that indicates every line in the file
/g is a flag that changes all occurrences on a line instead of just the first one
Searching

/ search forward; ? search backward
* search forward for word under cursor; # search backward for word under cursor
n next match in same direction; N next match in opposite direction
fx forward to next character x; Fx backward to previous character x
; move again to same character in same direction; , move again to same character in opposite direction
Files

:w write file to disk
:w name write file to disk as name
ZZ write file to disk and quit
:n edit a new file; :n! edit a new file without saving current changes
:q quit editing a file; :q! quit editing without saving changes
:e edit same file again (if changed outside vim)
:e . directory explorer
Windows

^Wn new window
^Wj down to next window; ^Wk up to previous window
^W_ maximise current window; ^W= make all windows equal size
^W+ increase window size; ^W- decrease window size
Source Navigation

% jump to matching parenthesis/bracket/brace, or language block if language module loaded
gd go to definition of local symbol under cursor; ^O return to previous position
^] jump to definition of global symbol (requires tags file); ^T return to previous position (arbitrary stack of positions maintained)
^N (in insert mode) automatic word completion
Show local changes

Vim has some features that make it easy to highlight lines that have been changed from a base version in source control. I have created a small vim script that makes this easy: http://github.com/ghewgill/vim-scmdiff




http://stackoverflow.com/questions/5400806/what-are-the-most-used-vim-commands-keypresses


73
down vote
accepted
Here's a tip sheet I wrote up once, with the commands I actually use regularly:

References

vim documentation online
advanced vim tips
more useful tips and graphical cheat sheet
General

Nearly all commands can be preceded by a number for a repeat count. eg. 5dd delete 5 lines
<Esc> gets you out of any mode and back to command mode
Commands preceded by : are executed on the command line at the bottom of the screen
:help help with any command
Navigation

Cursor movement: ←h ↓j ↑k l→
By words:
w next word (by punctuation); W next word (by spaces)
b back word (by punctuation); B back word (by spaces)
e end word (by punctuation); E end word (by spaces)
By line:
0 start of line; ^ first non-whitespace
$ end of line
By paragraph:
{ previous blank line; } next blank line
By file:
gg start of file; G end of file
123G go to specific line number
By marker:
mx set mark x; 'x go to mark x
'. go to position of last edit
' ' go back to last point before jump
Scrolling:
^F forward full screen; ^B backward full screen
^D down half screen; ^U up half screen
^E scroll one line up; ^Y scroll one line down
zz centre cursor line
Editing

u undo; ^R redo
. repeat last editing command
Inserting

All insertion commands are terminated with <Esc> to return to command mode.

i insert text at cursor; I insert text at start of line
a append text after cursor; A append text after end of line
o open new line below; O open new line above
Changing

r replace single character; R replace multiple characters
s change single character
cw change word; C change to end of line; cc change whole line
c<motion> changes text in the direction of the motion
ci( change inside parentheses (see text object selection for more examples)
Deleting

x delete char
dw delete word; D delete to end of line; dd delete whole line
d<motion> deletes in the direction of the motion
Cut and paste

yy copy line into paste buffer; dd cut line into paste buffer
p paste buffer below cursor line; P paste buffer above cursor line
xp swap two characters (x to delete one character, then p to put it back after the cursor position)
Blocks

v visual block stream; V visual block line; ^V visual block column
most motion commands extend the block to the new cursor position
o moves the cursor to the other end of the block
d or x cut block into paste buffer
y copy block into paste buffer
> indent block; < unindent block
gv reselect last visual block
Global

:%s/foo/bar/g substitute all occurrences of "foo" to "bar"
% is a range that indicates every line in the file
/g is a flag that changes all occurrences on a line instead of just the first one
Searching

/ search forward; ? search backward
* search forward for word under cursor; # search backward for word under cursor
n next match in same direction; N next match in opposite direction
fx forward to next character x; Fx backward to previous character x
; move again to same character in same direction; , move again to same character in opposite direction
Files

:w write file to disk
:w name write file to disk as name
ZZ write file to disk and quit
:n edit a new file; :n! edit a new file without saving current changes
:q quit editing a file; :q! quit editing without saving changes
:e edit same file again (if changed outside vim)
:e . directory explorer
Windows

^Wn new window
^Wj down to next window; ^Wk up to previous window
^W_ maximise current window; ^W= make all windows equal size
^W+ increase window size; ^W- decrease window size
Source Navigation

% jump to matching parenthesis/bracket/brace, or language block if language module loaded
gd go to definition of local symbol under cursor; ^O return to previous position
^] jump to definition of global symbol (requires tags file); ^T return to previous position (arbitrary stack of positions maintained)
^N (in insert mode) automatic word completion
Show local changes

Vim has some features that make it easy to highlight lines that have been changed from a base version in source control. I have created a small vim script that makes this easy: http://github.com/ghewgill/vim-scmdiff


** sfsf 
